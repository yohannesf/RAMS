using DevExpress.XtraBars;
using DevExpress.XtraGrid.Views.Grid;
using RAMSDBModel;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Windows.Forms;

namespace RAMSDB_WinForms.PavedRoads
{
    public partial class PavedTentativeRoadMaintenancePlan : DevExpress.XtraBars.Ribbon.RibbonForm
    {
        private int _year;
        private Guid _roadID;
        private string _roadSurfaceType;
        List<PavedRoadUnitCost> unitCost = new List<PavedRoadUnitCost>();

        RAMSDBModel.RAMSDBEntities _context = new RAMSDBModel.RAMSDBEntities();



        public PavedTentativeRoadMaintenancePlan(int Year, Guid RoadID)
        {
            InitializeComponent();

            _year = Year;
            _roadID = RoadID;
            _roadSurfaceType = _context.RoadsGISData.Where(c => c.RoadID == _roadID).Select(c => c.RoadSurfaceType.SurfaceTypeName).FirstOrDefault().ToString();

            InitBindings();
        }

        public PavedTentativeRoadMaintenancePlan(int Year, Guid RoadID, string RoadSurfaceType)
        {
            InitializeComponent();

            _year = Year;
            _roadID = RoadID;
            _roadSurfaceType = RoadSurfaceType;

            InitBindings();
        }

        private void InitBindings()
        {
            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext

            //var zzz= _context.PavedTentativeRoadMaintenancePlan.Include("RoadsGISData").Include("PavedCategoryofWork")
            //                                                     .Where(c => c.RoadID == _roadID && c.Year == _year).ToList();




            var perRoadperCatCost = (from trp in _context.PavedTentativeRoadMaintenancePlan
                                     join uc in _context.PavedRoadUnitCost on trp.CatWorkID equals uc.CatWorkID
                                     let tCost = trp.Quantity * uc.PavedUnitCost
                                     group trp by new
                                     {
                                         trp.Year,
                                         trp.RoadID,
                                         uc.CatWorkID,
                                         uc.UnitCostUnit
                                     } into result

                                     // select new {result.Key.Year, result.Key.Year, (result.Key.q).GetValueOrDefault().}

                                     select new
                                     {
                                         result.Key.Year,
                                         result.Key.RoadID,
                                         result.Key.CatWorkID,

                                         ActivityName = result.Select(c => c.PavedCategoryofWork.ActivityName).FirstOrDefault(),
                                         Intervention = result.Select(c => c.PavedCategoryofWork.WorkDescription).FirstOrDefault(),
                                         Scope = result.Select(c => c.PavedCategoryofWork.Scope).FirstOrDefault(),
                                         QtyUnit = result.Key.UnitCostUnit,
                                         Quantity = result.Select(c => c.Quantity).Sum(),
                                         //  cat = result.Select(c => c.PavedCategoryofWork.ActivityName),

                                         perRowCost = (result.Select(c => c.Quantity).Sum() *
                                          (from c in result select c.PavedCategoryofWork.PavedRoadUnitCosts.Select(t => t.PavedUnitCost).Sum()).FirstOrDefault())
                                     }).Where(c => c.RoadID == _roadID && c.Year == _year).ToList();



            //  var all  = from c in perRoadperCatCost join uc in _context.PavedCategoryofWork on c.CatWorkID equals uc.CatWorkID

            //pavedTentativeRoadMaintenancePlanBindingSource.DataSource = _context.PavedTentativeRoadMaintenancePlan.Include("RoadsGISData").Include("PavedCategoryofWork")
            //                                                     .Where(c => c.RoadID == _roadID && c.Year == _year).ToList();
            pavedTentativeRoadMaintenancePlanBindingSource.DataSource = perRoadperCatCost.ToList();
            categoryofWorkBindingSource.DataSource = _context.PavedCategoryofWork.ToList();

            unitCost = _context.PavedRoadUnitCost.ToList();

            /* 
                        pavedTentativeRoadMaintenancePlanBindingSource.DataSource = _context.UnpavedTentativeRoadMaintenancePlan.Include("RoadsGISData").Include("UnpavedCategoryofWork")
                                                                                .Where(c => c.RoadID == _roadID && c.Year == _year).ToList();
                        categoryofWorkBindingSource.DataSource = _context.UnpavedCategoryofWork.ToList();

                        unitCost = _context.UnpavedRoadUnitCost.ToList();
                        */

            lblRoadName.Text = "Road Name: " + _context.RoadsGISData.Where(c => c.RoadID == _roadID).Select(c => c.RoadOriginDestination).FirstOrDefault().ToString();


            lblSurfaceType.Text = "Road Surface Type: " + _roadSurfaceType;
            label2.Text = "Year: " + _year.ToString();

            //txtRoadID.Text ="Road Name: " + dbContext.RoadsGISData.Where(c => c.RoadID == _roadID).Select(c => c.RoadOriginDestination).FirstOrDefault().ToString();// x.Select(c => c.RoadsGISData.RoadOriginDestination).FirstOrDefault().ToString();// _roadID.ToString();
            //txtSurfaceType.Text ="Road Surface Type: "+ _roadSurfaceType;
            //txtYear.Text = "Year: " + _year.ToString();

            //    .Local.ToBindingList();

            // Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.
            //dbContext.TentativeRoadMaintenancePlan.LoadAsync().ContinueWith(loadTask =>
            //{
            //    // Bind data to control when loading complete
            //    tentativeRoadMaintenancePlanBindingSource.DataSource = dbContext.TentativeRoadMaintenancePlan.Local.ToBindingList();
            //}, System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext());
        }

        private void GridView_InitNewRow(object sender, DevExpress.XtraGrid.Views.Grid.InitNewRowEventArgs e)
        {
            gridView1.OptionsView.NewItemRowPosition = DevExpress.XtraGrid.Views.Grid.NewItemRowPosition.Top;

            //Handle the InitNewRow event to initialize newly added rows. To initialize row dcells use the SetRowCellValue method 

            DevExpress.XtraGrid.Views.Grid.GridView view = sender as DevExpress.XtraGrid.Views.Grid.GridView;
            view.SetRowCellValue(e.RowHandle, view.Columns["RoadID"], _roadID);
            view.SetRowCellValue(e.RowHandle, view.Columns["Year"], Convert.ToInt16(_year));


        }

        private void barButtonItem1_ItemClick(object sender, ItemClickEventArgs e)
        {


            if (_context.SaveChanges() > 0)
            {
                toastNotificationsManager1.ShowNotification(toastNotificationsManager1.Notifications[0]);
            };

            // (gridControl1.DataSource as BindingList<TentativeRoadMaintenancePlan>).AddNew();
        }

        private void gridControl1_Click(object sender, EventArgs e)
        {


        }

        private void GridView_RowUpdated(object sender, DevExpress.XtraGrid.Views.Base.RowObjectEventArgs e)
        {

        }

        private void GridView_RowValidated(object sender, DevExpress.XtraGrid.Views.Base.ValidateRowEventArgs e)
        {
            GridView view = sender as GridView;
            if (view.IsNewItemRow(e.RowHandle))
            {
                RAMSDBModel.PavedTentativeRoadMaintenancePlan dw = (RAMSDBModel.PavedTentativeRoadMaintenancePlan)view.GetRow(e.RowHandle);
                _context.PavedTentativeRoadMaintenancePlan.Add(dw);
                _context.SaveChanges();
            }
        }

        private void txtRoadID_TextChanged(object sender, EventArgs e)
        {

        }

        private void GridView_UnboundColumn(object sender, DevExpress.XtraGrid.Views.Base.CustomColumnDataEventArgs e)
        {
            GridView view = sender as GridView;
            if (view == null) return;


            int rowIndex = e.ListSourceRowIndex;
            int catID = (int)view.GetListSourceRowCellValue(rowIndex, "CatWorkID");


            if (unitCost.Where(c => c.CatWorkID == catID).Select(c => c.PavedUnitCost).FirstOrDefault() == null) return;
            decimal t = (decimal)unitCost.Where(c => c.CatWorkID == catID).Select(c => c.PavedUnitCost).FirstOrDefault();


            if (e.Column.FieldName != "UnitCost") return;
            if (e.IsGetData)
            {
                e.Value = t;
            }
        }

        private void Form_FormClosing(object sender, FormClosingEventArgs e)
        {
            if (_context.ChangeTracker.HasChanges())
                _context.SaveChanges();

        }

        private void barButtonItem2_ItemClick(object sender, ItemClickEventArgs e)
        {
            if (gridView1.SelectedRowsCount > 0)
            {



                GridView view = gridView1 as GridView;



                int rowHandle = view.GetSelectedRows()[0];

                if (!view.IsGroupRow(rowHandle))
                {
                    RAMSDBModel.PavedTentativeRoadMaintenancePlan dw = (RAMSDBModel.PavedTentativeRoadMaintenancePlan)view.GetRow(rowHandle);
                    _context.PavedTentativeRoadMaintenancePlan.Remove(dw);
                    _context.SaveChanges();
                    gridView1.DeleteRow(rowHandle);

                }
            }
            else
            {
                MessageBox.Show("Please select a row from the table below first.");
            }
        }
    }
}