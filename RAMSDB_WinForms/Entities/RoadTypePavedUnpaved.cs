//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Entity Framework DbContext template.
// Code is generated on: 3/9/2022 2:28:37 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;

namespace RAMSDBModel
{
    [System.ComponentModel.DataAnnotations.Schema.Table("RoadTypePavedUnpaved", Schema = "dbo")]
    public partial class RoadTypePavedUnpaved : INotifyPropertyChanged
    {

        public RoadTypePavedUnpaved()
        {
            this.RoadsGISDatas = new ObservableListSource<RoadsGISData>();
            this.RoadSurfaceTypes = new ObservableListSource<RoadSurfaceType>();
            OnCreated();
        }

        #region Properties

        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.Schema.Column(TypeName = "int", Order = 0)]
        [System.ComponentModel.DataAnnotations.Schema.DatabaseGenerated(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity)]
        public virtual int ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    _ID = value;
                    OnPropertyChanged("ID");
                }
            }
        }
        private int _ID;

        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.Schema.Column(TypeName = "varchar", Order = 1)]
        public virtual string RoadType
        {
            get
            {
                return _RoadType;
            }
            set
            {
                if (_RoadType != value)
                {
                    _RoadType = value;
                    OnPropertyChanged("RoadType");
                }
            }
        }
        private string _RoadType;

        [System.ComponentModel.DataAnnotations.Schema.Column(TypeName = "varchar(max)", Order = 2)]
        public virtual string Description
        {
            get
            {
                return _Description;
            }
            set
            {
                if (_Description != value)
                {
                    _Description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _Description;

        #endregion

        #region Navigation Properties

        [System.ComponentModel.DataAnnotations.Schema.InverseProperty("RoadTypePavedUnpaved")]
        public virtual ObservableListSource<RoadsGISData> RoadsGISDatas { get; set; }
        [System.ComponentModel.DataAnnotations.Schema.InverseProperty("RoadTypePavedUnpaved")]
        public virtual ObservableListSource<RoadSurfaceType> RoadSurfaceTypes { get; set; }

        #endregion

        #region Extensibility Method Definitions

        partial void OnCreated();

        #endregion

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        protected void OnPropertyChanged(string propertyName) {

          if (PropertyChanged != null)
            PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

}
