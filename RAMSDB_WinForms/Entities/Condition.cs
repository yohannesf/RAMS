//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Entity Framework DbContext template.
// Code is generated on: 3/7/2022 4:13:26 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;

namespace RAMSDBModel
{
    [System.ComponentModel.DataAnnotations.Schema.Table("Condition", Schema = "dbo")]
    public partial class Condition : INotifyPropertyChanged
    {

        public Condition()
        {
            this.StructureConditionSurveys_StructureCondition = new ObservableListSource<StructureConditionSurvey>();
            this.StructureConditionSurveys_RoadFurnitureCondition = new ObservableListSource<StructureConditionSurvey>();
            this.UnpavedRoadConditionSurveys_DrainageConditionLeft = new ObservableListSource<UnpavedRoadConditionSurvey>();
            this.UnpavedRoadConditionSurveys_DrainageConditionRight = new ObservableListSource<UnpavedRoadConditionSurvey>();
            this.UnpavedRoadConditionSurveys_GravelThicknessFactor = new ObservableListSource<UnpavedRoadConditionSurvey>();
            this.UnpavedRoadConditionSurveys_SurfaceCondition = new ObservableListSource<UnpavedRoadConditionSurvey>();
            this.UnpavedRoadConditionSurveys_ShoulderConditionLeft = new ObservableListSource<UnpavedRoadConditionSurvey>();
            this.UnpavedRoadConditionSurveys_ShoulderConditionRight = new ObservableListSource<UnpavedRoadConditionSurvey>();
            OnCreated();
        }

        #region Properties

        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.Schema.Column(TypeName = "int", Order = 0)]
        [System.ComponentModel.DataAnnotations.Schema.DatabaseGenerated(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None)]
        public virtual int CID
        {
            get
            {
                return _CID;
            }
            set
            {
                if (_CID != value)
                {
                    _CID = value;
                    OnPropertyChanged("CID");
                }
            }
        }
        private int _CID;

        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.Schema.Column(TypeName = "varchar", Order = 1)]
        public virtual string ConditionName
        {
            get
            {
                return _ConditionName;
            }
            set
            {
                if (_ConditionName != value)
                {
                    _ConditionName = value;
                    OnPropertyChanged("ConditionName");
                }
            }
        }
        private string _ConditionName;

        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.Schema.Column(TypeName = "int", Order = 2)]
        public virtual int ConditionValue
        {
            get
            {
                return _ConditionValue;
            }
            set
            {
                if (_ConditionValue != value)
                {
                    _ConditionValue = value;
                    OnPropertyChanged("ConditionValue");
                }
            }
        }
        private int _ConditionValue;

        [System.ComponentModel.DataAnnotations.Schema.Column(TypeName = "varchar", Order = 3)]
        public virtual string DescShoulder
        {
            get
            {
                return _DescShoulder;
            }
            set
            {
                if (_DescShoulder != value)
                {
                    _DescShoulder = value;
                    OnPropertyChanged("DescShoulder");
                }
            }
        }
        private string _DescShoulder;

        [System.ComponentModel.DataAnnotations.Schema.Column(TypeName = "varchar", Order = 4)]
        public virtual string DescDrainage
        {
            get
            {
                return _DescDrainage;
            }
            set
            {
                if (_DescDrainage != value)
                {
                    _DescDrainage = value;
                    OnPropertyChanged("DescDrainage");
                }
            }
        }
        private string _DescDrainage;

        [System.ComponentModel.DataAnnotations.Schema.Column(TypeName = "varchar", Order = 5)]
        public virtual string DescGravelThickness
        {
            get
            {
                return _DescGravelThickness;
            }
            set
            {
                if (_DescGravelThickness != value)
                {
                    _DescGravelThickness = value;
                    OnPropertyChanged("DescGravelThickness");
                }
            }
        }
        private string _DescGravelThickness;

        [System.ComponentModel.DataAnnotations.Schema.Column(TypeName = "varchar", Order = 6)]
        public virtual string DescStructureAndRoadFurniture
        {
            get
            {
                return _DescStructureAndRoadFurniture;
            }
            set
            {
                if (_DescStructureAndRoadFurniture != value)
                {
                    _DescStructureAndRoadFurniture = value;
                    OnPropertyChanged("DescStructureAndRoadFurniture");
                }
            }
        }
        private string _DescStructureAndRoadFurniture;

        #endregion

        #region Navigation Properties

        [System.ComponentModel.DataAnnotations.Schema.InverseProperty("Condition_StructureCondition")]
        public virtual ObservableListSource<StructureConditionSurvey> StructureConditionSurveys_StructureCondition { get; set; }
        [System.ComponentModel.DataAnnotations.Schema.InverseProperty("Condition_RoadFurnitureCondition")]
        public virtual ObservableListSource<StructureConditionSurvey> StructureConditionSurveys_RoadFurnitureCondition { get; set; }
        [System.ComponentModel.DataAnnotations.Schema.InverseProperty("Condition_DrainageConditionLeft")]
        public virtual ObservableListSource<UnpavedRoadConditionSurvey> UnpavedRoadConditionSurveys_DrainageConditionLeft { get; set; }
        [System.ComponentModel.DataAnnotations.Schema.InverseProperty("Condition_DrainageConditionRight")]
        public virtual ObservableListSource<UnpavedRoadConditionSurvey> UnpavedRoadConditionSurveys_DrainageConditionRight { get; set; }
        [System.ComponentModel.DataAnnotations.Schema.InverseProperty("Condition_GravelThicknessFactor")]
        public virtual ObservableListSource<UnpavedRoadConditionSurvey> UnpavedRoadConditionSurveys_GravelThicknessFactor { get; set; }
        [System.ComponentModel.DataAnnotations.Schema.InverseProperty("Condition_SurfaceCondition")]
        public virtual ObservableListSource<UnpavedRoadConditionSurvey> UnpavedRoadConditionSurveys_SurfaceCondition { get; set; }
        [System.ComponentModel.DataAnnotations.Schema.InverseProperty("Condition_ShoulderConditionLeft")]
        public virtual ObservableListSource<UnpavedRoadConditionSurvey> UnpavedRoadConditionSurveys_ShoulderConditionLeft { get; set; }
        [System.ComponentModel.DataAnnotations.Schema.InverseProperty("Condition_ShoulderConditionRight")]
        public virtual ObservableListSource<UnpavedRoadConditionSurvey> UnpavedRoadConditionSurveys_ShoulderConditionRight { get; set; }

        #endregion

        #region Extensibility Method Definitions

        partial void OnCreated();

        #endregion

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        protected void OnPropertyChanged(string propertyName) {

          if (PropertyChanged != null)
            PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

}
