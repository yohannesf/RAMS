//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Entity Framework DbContext template.
// Code is generated on: 3/9/2022 2:28:37 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;

namespace RAMSDBModel
{
    [System.ComponentModel.DataAnnotations.Schema.Table("PavedVegetationControl", Schema = "dbo")]
    public partial class PavedVegetationControl : INotifyPropertyChanged
    {

        public PavedVegetationControl()
        {
            this.PavedRoadConditionSurveys = new ObservableListSource<PavedRoadConditionSurvey>();
            OnCreated();
        }

        #region Properties

        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.Schema.Column(TypeName = "int", Order = 0)]
        [System.ComponentModel.DataAnnotations.Schema.DatabaseGenerated(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity)]
        public virtual int ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    _ID = value;
                    OnPropertyChanged("ID");
                }
            }
        }
        private int _ID;

        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.Schema.Column(TypeName = "int", Order = 1)]
        public virtual int VegetationControlRate
        {
            get
            {
                return _VegetationControlRate;
            }
            set
            {
                if (_VegetationControlRate != value)
                {
                    _VegetationControlRate = value;
                    OnPropertyChanged("VegetationControlRate");
                }
            }
        }
        private int _VegetationControlRate;

        [System.ComponentModel.DataAnnotations.Schema.Column(TypeName = "text", Order = 2)]
        public virtual string Defect
        {
            get
            {
                return _Defect;
            }
            set
            {
                if (_Defect != value)
                {
                    _Defect = value;
                    OnPropertyChanged("Defect");
                }
            }
        }
        private string _Defect;

        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.Schema.Column(TypeName = "numeric", Order = 3)]
        public virtual decimal QtyM2
        {
            get
            {
                return _QtyM2;
            }
            set
            {
                if (_QtyM2 != value)
                {
                    _QtyM2 = value;
                    OnPropertyChanged("QtyM2");
                }
            }
        }
        private decimal _QtyM2;

        [System.ComponentModel.DataAnnotations.Schema.Column(TypeName = "varchar", Order = 4)]
        public virtual string ActivityCode
        {
            get
            {
                return _ActivityCode;
            }
            set
            {
                if (_ActivityCode != value)
                {
                    _ActivityCode = value;
                    OnPropertyChanged("ActivityCode");
                }
            }
        }
        private string _ActivityCode;

        #endregion

        #region Navigation Properties

        [System.ComponentModel.DataAnnotations.Schema.InverseProperty("PavedVegetationControl")]
        public virtual ObservableListSource<PavedRoadConditionSurvey> PavedRoadConditionSurveys { get; set; }

        #endregion

        #region Extensibility Method Definitions

        partial void OnCreated();

        #endregion

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        protected void OnPropertyChanged(string propertyName) {

          if (PropertyChanged != null)
            PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

}
