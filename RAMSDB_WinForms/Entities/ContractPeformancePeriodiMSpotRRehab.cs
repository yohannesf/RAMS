//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Entity Framework DbContext template.
// Code is generated on: 3/7/2022 4:13:26 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;

namespace RAMSDBModel
{
    [System.ComponentModel.DataAnnotations.Schema.Table("ContractPeformancePeriodiMSpotRRehab", Schema = "dbo")]
    public partial class ContractPeformancePeriodiMSpotRRehab : INotifyPropertyChanged
    {

        public ContractPeformancePeriodiMSpotRRehab()
        {
            OnCreated();
        }

        #region Properties

        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.Schema.Column(TypeName = "int", Order = 0)]
        [System.ComponentModel.DataAnnotations.Schema.DatabaseGenerated(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity)]
        public virtual int ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    _ID = value;
                    OnPropertyChanged("ID");
                }
            }
        }
        private int _ID;

        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.Schema.Column(TypeName = "int", Order = 1)]
        public virtual int ContractPeriodicID
        {
            get
            {
                return _ContractPeriodicID;
            }
            set
            {
                if (_ContractPeriodicID != value)
                {
                    _ContractPeriodicID = value;
                    OnPropertyChanged("ContractPeriodicID");
                }
            }
        }
        private int _ContractPeriodicID;

        [System.ComponentModel.DataAnnotations.Schema.Column(TypeName = "date", Order = 2)]
        public virtual global::System.DateTime? ProgressDate
        {
            get
            {
                return _ProgressDate;
            }
            set
            {
                if (_ProgressDate != value)
                {
                    _ProgressDate = value;
                    OnPropertyChanged("ProgressDate");
                }
            }
        }
        private global::System.DateTime? _ProgressDate;

        [System.ComponentModel.DataAnnotations.Schema.Column(TypeName = "int", Order = 3)]
        public virtual int? TimeWorked
        {
            get
            {
                return _TimeWorked;
            }
            set
            {
                if (_TimeWorked != value)
                {
                    _TimeWorked = value;
                    OnPropertyChanged("TimeWorked");
                }
            }
        }
        private int? _TimeWorked;

        [System.ComponentModel.DataAnnotations.Schema.Column(TypeName = "int", Order = 4)]
        public virtual int? PhysicalProgressToDate
        {
            get
            {
                return _PhysicalProgressToDate;
            }
            set
            {
                if (_PhysicalProgressToDate != value)
                {
                    _PhysicalProgressToDate = value;
                    OnPropertyChanged("PhysicalProgressToDate");
                }
            }
        }
        private int? _PhysicalProgressToDate;

        [System.ComponentModel.DataAnnotations.Schema.Column(TypeName = "int", Order = 5)]
        public virtual int? FinancialProgressToDate
        {
            get
            {
                return _FinancialProgressToDate;
            }
            set
            {
                if (_FinancialProgressToDate != value)
                {
                    _FinancialProgressToDate = value;
                    OnPropertyChanged("FinancialProgressToDate");
                }
            }
        }
        private int? _FinancialProgressToDate;

        [System.ComponentModel.DataAnnotations.Schema.Column(TypeName = "decimal", Order = 6)]
        public virtual decimal? TotalPaymentToDate
        {
            get
            {
                return _TotalPaymentToDate;
            }
            set
            {
                if (_TotalPaymentToDate != value)
                {
                    _TotalPaymentToDate = value;
                    OnPropertyChanged("TotalPaymentToDate");
                }
            }
        }
        private decimal? _TotalPaymentToDate;

        #endregion

        #region Navigation Properties

        [System.ComponentModel.DataAnnotations.Schema.ForeignKey("ContractPeriodicID")]
        [System.ComponentModel.DataAnnotations.Schema.InverseProperty("ContractPeformancePeriodiMSpotRRehabs")]
        public virtual ContractPeriodiMSpotRRehab ContractPeriodiMSpotRRehab
        {
            get
            {
                return _ContractPeriodiMSpotRRehab;
            }
            set
            {
                if (_ContractPeriodiMSpotRRehab != value)
                {
                    _ContractPeriodiMSpotRRehab = value;
                    OnPropertyChanged("ContractPeriodiMSpotRRehab");
                }
            }
        }
        private ContractPeriodiMSpotRRehab _ContractPeriodiMSpotRRehab;

        #endregion

        #region Extensibility Method Definitions

        partial void OnCreated();

        #endregion

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        protected void OnPropertyChanged(string propertyName) {

          if (PropertyChanged != null)
            PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

}
