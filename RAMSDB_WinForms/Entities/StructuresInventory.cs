//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Entity Framework DbContext template.
// Code is generated on: 3/9/2022 2:28:37 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;

namespace RAMSDBModel
{
    [System.ComponentModel.DataAnnotations.Schema.Table("StructuresInventory", Schema = "dbo")]
    public partial class StructuresInventory : INotifyPropertyChanged
    {

        public StructuresInventory()
        {
            this.StructureConditionSurveys = new ObservableListSource<StructureConditionSurvey>();
            OnCreated();
        }

        #region Properties

        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.Schema.Column(TypeName = "int", Order = 0)]
        [System.ComponentModel.DataAnnotations.Schema.DatabaseGenerated(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity)]
        public virtual int StructureID
        {
            get
            {
                return _StructureID;
            }
            set
            {
                if (_StructureID != value)
                {
                    _StructureID = value;
                    OnPropertyChanged("StructureID");
                }
            }
        }
        private int _StructureID;

        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.Schema.Column(TypeName = "uniqueidentifier", Order = 1)]
        public virtual global::System.Guid RoadID
        {
            get
            {
                return _RoadID;
            }
            set
            {
                if (_RoadID != value)
                {
                    _RoadID = value;
                    OnPropertyChanged("RoadID");
                }
            }
        }
        private global::System.Guid _RoadID;

        [System.ComponentModel.DataAnnotations.Schema.Column(TypeName = "varchar", Order = 2)]
        public virtual string StructureNo
        {
            get
            {
                return _StructureNo;
            }
            set
            {
                if (_StructureNo != value)
                {
                    _StructureNo = value;
                    OnPropertyChanged("StructureNo");
                }
            }
        }
        private string _StructureNo;

        [System.ComponentModel.DataAnnotations.Schema.Column(TypeName = "varchar", Order = 3)]
        public virtual string StructureName
        {
            get
            {
                return _StructureName;
            }
            set
            {
                if (_StructureName != value)
                {
                    _StructureName = value;
                    OnPropertyChanged("StructureName");
                }
            }
        }
        private string _StructureName;

        [System.ComponentModel.DataAnnotations.Schema.Column(TypeName = "varchar", Order = 4)]
        public virtual string StructureType
        {
            get
            {
                return _StructureType;
            }
            set
            {
                if (_StructureType != value)
                {
                    _StructureType = value;
                    OnPropertyChanged("StructureType");
                }
            }
        }
        private string _StructureType;

        [System.ComponentModel.DataAnnotations.Schema.Column(TypeName = "varchar", Order = 5)]
        public virtual string LocationChainage
        {
            get
            {
                return _LocationChainage;
            }
            set
            {
                if (_LocationChainage != value)
                {
                    _LocationChainage = value;
                    OnPropertyChanged("LocationChainage");
                }
            }
        }
        private string _LocationChainage;

        [System.ComponentModel.DataAnnotations.Schema.Column(TypeName = "varchar", Order = 6)]
        public virtual string NoOfSpansBridgeOnly
        {
            get
            {
                return _NoOfSpansBridgeOnly;
            }
            set
            {
                if (_NoOfSpansBridgeOnly != value)
                {
                    _NoOfSpansBridgeOnly = value;
                    OnPropertyChanged("NoOfSpansBridgeOnly");
                }
            }
        }
        private string _NoOfSpansBridgeOnly;

        [System.ComponentModel.DataAnnotations.Schema.Column(TypeName = "decimal", Order = 7)]
        public virtual decimal? WidthInMeters
        {
            get
            {
                return _WidthInMeters;
            }
            set
            {
                if (_WidthInMeters != value)
                {
                    _WidthInMeters = value;
                    OnPropertyChanged("WidthInMeters");
                }
            }
        }
        private decimal? _WidthInMeters;

        [System.ComponentModel.DataAnnotations.Schema.Column(TypeName = "decimal", Order = 8)]
        public virtual decimal? LengthInMeters
        {
            get
            {
                return _LengthInMeters;
            }
            set
            {
                if (_LengthInMeters != value)
                {
                    _LengthInMeters = value;
                    OnPropertyChanged("LengthInMeters");
                }
            }
        }
        private decimal? _LengthInMeters;

        [System.ComponentModel.DataAnnotations.Schema.Column(TypeName = "varchar", Order = 9)]
        public virtual string CulvertsOnlyNo
        {
            get
            {
                return _CulvertsOnlyNo;
            }
            set
            {
                if (_CulvertsOnlyNo != value)
                {
                    _CulvertsOnlyNo = value;
                    OnPropertyChanged("CulvertsOnlyNo");
                }
            }
        }
        private string _CulvertsOnlyNo;

        [System.ComponentModel.DataAnnotations.Schema.Column(TypeName = "varchar", Order = 10)]
        public virtual string CulvertsOnlySize
        {
            get
            {
                return _CulvertsOnlySize;
            }
            set
            {
                if (_CulvertsOnlySize != value)
                {
                    _CulvertsOnlySize = value;
                    OnPropertyChanged("CulvertsOnlySize");
                }
            }
        }
        private string _CulvertsOnlySize;

        [System.ComponentModel.DataAnnotations.Schema.Column(TypeName = "nchar", Order = 11)]
        public virtual string HeadWallsYesNO
        {
            get
            {
                return _HeadWallsYesNO;
            }
            set
            {
                if (_HeadWallsYesNO != value)
                {
                    _HeadWallsYesNO = value;
                    OnPropertyChanged("HeadWallsYesNO");
                }
            }
        }
        private string _HeadWallsYesNO;

        [System.ComponentModel.DataAnnotations.Schema.Column(TypeName = "text", Order = 12)]
        public virtual string Remarks
        {
            get
            {
                return _Remarks;
            }
            set
            {
                if (_Remarks != value)
                {
                    _Remarks = value;
                    OnPropertyChanged("Remarks");
                }
            }
        }
        private string _Remarks;

        #endregion

        #region Navigation Properties

        [System.ComponentModel.DataAnnotations.Schema.InverseProperty("StructuresInventory")]
        public virtual ObservableListSource<StructureConditionSurvey> StructureConditionSurveys { get; set; }

        #endregion

        #region Extensibility Method Definitions

        partial void OnCreated();

        #endregion

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        protected void OnPropertyChanged(string propertyName) {

          if (PropertyChanged != null)
            PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

}
