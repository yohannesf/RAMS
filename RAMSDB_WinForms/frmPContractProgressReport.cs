using DevExpress.XtraBars;
using RAMSDB.Data;
using RAMSDBModel;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;


namespace RAMSDB_WinForms
{
    public partial class frmPContractProgressReport : DevExpress.XtraBars.Ribbon.RibbonForm
    {

        List<int> contractIDs = new List<int>();
        RAMSDBDataLoader dataLoader = new RAMSDBDataLoader();
        RAMSDBEntities _context = new RAMSDBEntities();
        List<Guid> roadsAssignedForUser = new List<Guid>();
        List<Tuple<Guid, int>> tentRoads = new List<Tuple<Guid, int>>();
        List<RAMSDBModel.PrioritizedRoads> tentativePrioritizedRoads = new List<RAMSDBModel.PrioritizedRoads>();

        //public string[] years = LinqHelper.ListofYearsGC();
        //public int _year = DateTime.Now.Year;
        public int _year = LinqHelper.ECYear();
        public string[] years = LinqHelper.ListofYearsEC();
        public Guid _userID = RAMSDBDataLoader.LoginInfo.GetLoggedInUser.UserID;
        public string _region = RAMSDBDataLoader.LoggedInUser.userRegion;
        public string userWoreda = "";

        List<RoadsGISData> rgd = new List<RoadsGISData>();
        List<RoadsPerUser> rpu = new List<RoadsPerUser>();






        int _numberOfRoads;


        public frmPContractProgressReport()
        {
            InitializeComponent();

            cboYear.Items.AddRange(years);

            cboYear.SelectedIndex = cboYear.FindStringExact(_year.ToString());


            var woreda = _context.AdminBoundary.Where(c => c.RegionName == _region).
               Select(c => new { c.ZoneName, c.WoredaName }).ToList();


            adminBoundaryBindingSource.DataSource = woreda.ToList();

            userWoreda = _context.RoadsPerUser.Where(c => c.UserID == _userID).
                Select(c => c.AdminBoundary.WoredaName).FirstOrDefault().ToString();

            cboWoreda.SelectedIndex = cboWoreda.FindStringExact(userWoreda);

            lblRegion.Text = _region;





            InitBindings();
            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
            // RAMSDBModel.RAMSDBEntities dbContext = new RAMSDBModel.RAMSDBEntities();

            //  unpavedTentativeRoadMaintenancePlanBindingSource.DataSource = dbContext.UnpavedTentativeRoadMaintenancePlan.ToList();

            // Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.
            //dbContext.UnpavedTentativeRoadMaintenancePlan.LoadAsync().ContinueWith(loadTask =>
            //{
            //    // Bind data to control when loading complete
            //    unpavedTentativeRoadMaintenancePlanBindingSource.DataSource = dbContext.UnpavedTentativeRoadMaintenancePlan.Local.ToBindingList();
            //}, System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext());
            //// This line of code is generated by Data Source Configuration Wizard
            //// Instantiate a new DBContext
            // Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.

        }

        private void InitBindings()
        {
            //    int yearFilter = cboYear.SelectedItem == null ? Convert.ToInt16(_year) : Convert.ToInt16(cboYear.Text);

            //    roadsAssignedForUser = dataLoader.unpavedRoadsPerUserDL.Select(z => z.RoadID).ToList();


            //    rgd = _context.RoadsGISData.Where(c => roadsAssignedForUser.Contains(c.RoadID)).ToList();//.ToList();
            //    rpu = dataLoader.roadsPerUserDL.ToList();



            //  //  lblWoreda.Text = rpu.Where(c => roadsAssignedForUser.Contains(c.RoadID)).Select(c => c.AdminBoundary.WoredaName).FirstOrDefault(); //multiCriteriaData.Select(c => c.RoadsPerUser.AdminBoundary.WoredaName).FirstOrDefault().ToString();


            //    lblRegion.Text = _region;// unpavedSurvey.Select(c => c.RoadsPerUser.AdminBoundary.ZoneName).FirstOrDefault().ToString();



            //    tentativePrioritizedRoads = _context.PrioritizedRoads.
            //        Where(p => roadsAssignedForUser.Contains(p.RoadID) && p.Year == yearFilter).ToList();

            ////    tentativeRoadIDs = tentativePrioritizedRoads.Select(t => t.RoadID).ToList();


            //    //var pRoadIDs = _context.UnpavedTentativeRoadMaintenancePlan.Where(c => tentativeRoadIDs.Contains(c.RoadID)).ToList();
            //    //var pRoadIDYear = pRoadIDs.Where(c => c.Year == yearFilter).ToList();

            //    //contractPeformancePeriodiMSpotRRehabBindingSource.DataSource = _context.ContractPeformancePeriodiMSpotRRehab.ToList();

            //    //unpavedTentativeRoadMaintenancePlanBindingSource.DataSource = pRoadIDYear.ToList();
            //    //_numberOfRoads = pRoadIDYear.Select(c=>c.RoadID).Distinct().ToList().Count;

            //    lblNumRoads.Text = _numberOfRoads.ToString();

            string woredaFilter = cboWoreda.SelectedItem == null ? userWoreda : cboWoreda.Text;


            contractIDs = _context.ContractPeriodiMSpotRRehab.
                Where(c => c.Woreda == woredaFilter).Select(c => c.ID).ToList();

            contractPeformancePeriodiMSpotRRehabBindingSource.DataSource = _context.ContractPeformancePeriodiMSpotRRehab.
                Where(c => contractIDs.Contains(c.ContractPeriodicID)).ToList();
        }

        private void pivotGridControl1_Click(object sender, EventArgs e)
        {

        }
        private void cboYear_SelectedIndexChanged(object sender, EventArgs e)
        {
            InitBindings();
        }



        private void bbiExport_ItemClick(object sender, ItemClickEventArgs e)
        {
            pivotGridControl1.ShowRibbonPrintPreview();
        }

        private void repositoryItemButtonEdit1_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        {

        }

        private void cboWoreda_SelectedIndexChanged(object sender, EventArgs e)
        {
            InitBindings();
        }
    }
}