using DevExpress.Export.Xl;
using RAMSDB.Data;
using RAMSDBModel;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.Entity;
using System.Data.OleDb;
using System.Data.SqlClient;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Windows.Forms;

using Excel = Microsoft.Office.Interop.Excel;

namespace RAMSDB_WinForms.Administration
{
    public partial class UserAdmin : Form
    {
        RAMSDBDataLoader dataLoader = new RAMSDBDataLoader();
        RAMSDBModel.RAMSDBEntities dbContext = new RAMSDBModel.RAMSDBEntities();

        public Guid userID = RAMSDBDataLoader.LoginInfo.GetLoggedInUser.UserID;

        public string[] years = LinqHelper.ListofYearsGC();
        public int _year = DateTime.Now.Year;

        public UserAdmin()
        {
            InitializeComponent();

            cboYear.Items.AddRange(years);

            cboYear.SelectedIndex = cboYear.FindStringExact(_year.ToString());

            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
            // Export();

            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext

            // Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.
            dbContext.RoadsGISData.LoadAsync().ContinueWith(loadTask =>
            {
                // Bind data to control when loading complete
                roadsGISDataBindingSource.DataSource = dbContext.RoadsGISData.Local.ToBindingList();
            }, System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext());
        }




        private void Export()
        {
            RAMSDBModel.RAMSDBEntities dbContext = new RAMSDBModel.RAMSDBEntities();

            List<UnpavedRoadConditionSurvey> ucs = new List<UnpavedRoadConditionSurvey>();

            string userWoreda = dbContext.RoadsPerUser.Where(c => c.UserID == RAMSDBDataLoader.LoginInfo.GetLoggedInUser.UserID).
              Select(c => c.AdminBoundary.WoredaName).FirstOrDefault().ToString();

            // ucs = dbContext.UnpavedRoadConditionSurvey.ToList();


            ucs = dataLoader.unpavedRoadConditionSurveysDL.ToList();

            var ary = dataLoader.unpavedRoadConditionSurveysDL.ToArray();

            int uscC = ucs.Count;





            var names = typeof(UnpavedRoadConditionSurvey).GetProperties()
                .Where(c => c.PropertyType.IsValueType || c.PropertyType == typeof(string))
                        .Select(property => property.Name)
                        .ToArray();

            //  foreach ()


            var namesC = names.Count();
            var aryC = ary.Count();







            Excel.Application xlApp;
            Excel.Workbook xlWorkBook;
            Excel.Worksheet xlWorkSheet;
            object misValue = System.Reflection.Missing.Value;



            //  var workbook = new Excel.Workbook();
            //  var worksheet = workbook.Worksheets.Add("ImportFromIEnumerable");

            xlApp = new Excel.Application();

            xlWorkBook = xlApp.Workbooks.Add(System.Reflection.Missing.Value);
            xlWorkSheet = (Excel.Worksheet)xlWorkBook.Worksheets.get_Item(1);

            xlWorkSheet.Name = "UnpavedCSDL";

            for (var i = 0; i < names.Count(); i++)
            {
                xlWorkSheet.Cells[1, i + 1] = names[i].ToString();
            }


            for (var i = 0; i < ucs.Count; i++)
            {
                var b = ucs[i];
                var j = 0;
                foreach (var h in names)
                {
                    //dbContext.Entry(b).Property(h).
                    // var t = ucs[0].road


                    xlWorkSheet.Cells[i + 2, j + 1] = dbContext.Entry(b).Property(h).CurrentValue;
                    //var t = ucs[0].RCSID;
                    //var ggg = ucs.ElementAt(1);
                    //var tz = dbContext.Entry(b).Property(h).CurrentValue;

                    //var zz = string.Concat(ucs[i], ".", h);
                    j++;
                }
            }



            //for (var i = 0; i < ucs.Count; i++)
            //{
            //    for (var j = 0; j <  dtTable.Columns.Count; j++)
            //    {
            //        xlWorkSheet.Cells[i + 2, j + 1] = dtTable.Rows[i][j];
            //    }
            //}

            // xlWorkSheet.

            //Insert IEnumerable<T> to worksheet cells
            //  worksheet.Cell("A1").InsertData(ucs);

            xlWorkSheet.Rows.RowHeight = 15;//.Columns().AutoFitContents();

            string workBookName = userWoreda +
                DateTime.Now.Year.ToString() +
                DateTime.Now.Month.ToString() +
                DateTime.Now.Day.ToString() +
                DateTime.Now.Hour.ToString()+
                DateTime.Now.Minute.ToString() +

                 ".xlsx";

            // xlWorkBook.SaveAs("ImportFromIEnumerable.xlsx");
            xlWorkBook.SaveAs(workBookName);

            xlWorkBook.Close(true, misValue, misValue);
            xlApp.Quit();

            releaseObject(xlApp);
            releaseObject(xlWorkBook);
            releaseObject(xlWorkSheet);

            //catch (Exception ex)
            //{
            //    throw ex;
            //}
        }

        // var urc = dbContext.UnpavedRoadConditionSurvey.ToList();

        //void ExportIt<T>(IQueryable<T> et)
        //    where T : IRepository<T>
        //{
        //  IEnumerable<string> e = et.Select(c=>)
        //  //  if (rAMSDBEntities)
        // //   var c = dataLoader
        //}

        void GenerateDocument(IXlDocument document)
        {
            // Specify the document culture.
            document.Options.Culture = CultureInfo.CurrentCulture;

            // Add a new worksheet to the document.
            using (IXlSheet sheet = document.CreateSheet())
            {
                // Specify the worksheet name.
                sheet.Name = "Employees";

                // Specify print settings for the worksheet.
                //    SetupPageParameters(sheet);

                // Generate worksheet columns.
                //   GenerateColumns(sheet);

                // Add the title to the documents exported to the XLSX and XLS formats.  
                //if (document.Options.DocumentFormat != XlDocumentFormat.Csv)
                //    GenerateTitle(sheet);

                // Create the header row.
                //GenerateHeaderRow(sheet);

                //int firstDataRowIndex = sheet.CurrentRowIndex;

                //// Create the data rows.
                //for (int i = 0; i < employees.Count; i++)
                //    GenerateDataRow(sheet, employees[i], (i + 1) == employees.Count);

                //// Specify the data range to be printed.
                //sheet.PrintArea = sheet.DataRange;

                //// Create data validation criteria for the documents exported to the XLSX and XLS formats.
                //if (document.Options.DocumentFormat != XlDocumentFormat.Csv)
                //    GenerateDataValidations(sheet, firstDataRowIndex);
            }
        }

        public static void CreateExcel(DataSet ds, string excelPath)
        {
            Excel.Application xlApp;
            Excel.Workbook xlWorkBook;
            Excel.Worksheet xlWorkSheet;
            object misValue = System.Reflection.Missing.Value;

            try
            {
                //Previous code was referring to the wrong class, throwing an exception
                xlApp = new Excel.Application();
                xlWorkBook = xlApp.Workbooks.Add(misValue);
                xlWorkSheet = (Excel.Worksheet)xlWorkBook.Worksheets.get_Item(1);

                for (int i = 0; i <= ds.Tables[0].Rows.Count - 1; i++)
                {
                    for (int j = 0; j <= ds.Tables[0].Columns.Count - 1; j++)
                    {
                        xlWorkSheet.Cells[i + 1, j + 1] = ds.Tables[0].Rows[i].ItemArray[j].ToString();
                    }
                }

                xlWorkBook.SaveAs(excelPath, Excel.XlFileFormat.xlWorkbookNormal, misValue, misValue, misValue, misValue, Excel.XlSaveAsAccessMode.xlExclusive, misValue, misValue, misValue, misValue, misValue);
                xlWorkBook.Close(true, misValue, misValue);
                xlApp.Quit();

                releaseObject(xlApp);
                releaseObject(xlWorkBook);
                releaseObject(xlWorkSheet);
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        private static void releaseObject(object obj)
        {
            try
            {
                System.Runtime.InteropServices.Marshal.ReleaseComObject(obj);
                obj = null;
            }
            catch
            {
                obj = null;
            }
            finally
            {
                GC.Collect();
            }
        }

        private void button1_Click(object sender, EventArgs e)
        {

            string filePath = OpenExcel();

            if (filePath != null)
            {
                GetDataTableOfExcel(filePath);
            }

          //  GetDataTableOfExcel("C:\\Users\\yohan\\Documents\\Meskan_2020DataExportedOn_2020923_14_45.xlsx");
             // Export();
          //  LinqHelper db = new LinqHelper();
            //var db = new MopDb();
           // DataTable allUser = LinqHelper.DataTable(dbContext,"SELECT * FROM [dbo].[Condition]");
            //var x = allUser.Rows.Count;
        }

        private void button2_Click(object sender, EventArgs e)
        {

            int yearFilter = cboYear.SelectedItem == null ? Convert.ToInt16(_year) : Convert.ToInt16(cboYear.Text);


            DataTable unpavedRCS = LinqHelper.DataTable
                (dbContext,
                "SELECT * FROM [dbo].[UnpavedRoadConditionSurvey] where [UserID] = @uID and [RCSYear]=@year",
                new SqlParameter("uID", SqlDbType.Int) { Value = userID },
                new SqlParameter("year", SqlDbType.Int) { Value = yearFilter }
                );
            unpavedRCS.TableName = "UnpavedRoadConditionSurvey";

            DataTable pavedRCS = LinqHelper.DataTable
               (dbContext,
               "SELECT * FROM [dbo].[PavedRoadConditionSurvey] where [UserID] = @uID and [PRCSYear]=@year",
               new SqlParameter("uID", SqlDbType.Int) { Value = userID },
               new SqlParameter("year", SqlDbType.Int) { Value = yearFilter }
               );
            pavedRCS.TableName = "PavedRoadConditionSurvey";


            DataTable multiCriteriaData = LinqHelper.DataTable
             (dbContext,
             "SELECT * FROM [RAMSDB].[dbo].[MultiCriteriaAnalysisData] mc " +
             "where [Year] = @year and  mc.[RoadID] in (select [RoadID] from [RAMSDB].[dbo].[RoadsPerUser]" +
             "where [UserID] = @uID)",
             new SqlParameter("uID", SqlDbType.Int) { Value = userID },
             new SqlParameter("year", SqlDbType.Int) { Value = yearFilter }
             );

            multiCriteriaData.TableName = "MultiCriteriaData";


            DataTable trafficSurvey = LinqHelper.DataTable
            (dbContext,
            "SELECT * FROM [RAMSDB].[dbo].[TrafficSurvey] ts " +
            "where [TrafficSurveyYear] = @year and  ts.[RoadID] in " +
            "(select [RoadID] from [RAMSDB].[dbo].[RoadsPerUser]" +
            "where [UserID] = @uID)",
            new SqlParameter("uID", SqlDbType.Int) { Value = userID },
            new SqlParameter("year", SqlDbType.Int) { Value = yearFilter }
            );

            trafficSurvey.TableName = "TrafficSurvey";




            DataSet dataSet = new DataSet();

            dataSet.Tables.Add(unpavedRCS);
            dataSet.Tables.Add(pavedRCS);
            dataSet.Tables.Add(multiCriteriaData);
            dataSet.Tables.Add(trafficSurvey);

            string filePath = dataSet.ExportToExcel(yearFilter.ToString());

            lblFilePath.Text = "Data successfully exported! You can find the excel file in..." + 
                                Environment.NewLine +
                                filePath;

            ShowFile(filePath);

            //  My_DataTable_Extensions.ExportToExcel()
            //"C:\\Users\\yohan\\Documents\\test3.xlsx"
            // ExportTo
            //    "C:\\temp\\test.xlsx"
            //   unpavedRCS.ExportToExcel();
            // allUser.ExportToExcel();
            //  var x = allUser.Rows.Count;

        }
   

     void ShowFile(string fileName)
    {
        if (!File.Exists(fileName))
            return;
        DialogResult dResult = MessageBox.Show(String.Format("Do you want to open the resulting file?", fileName),
            this.Text, MessageBoxButtons.YesNo, MessageBoxIcon.Question);
        if (dResult == DialogResult.Yes)
            Process.Start(fileName);
    }

        string OpenExcel()
        {
            var filePath = string.Empty;

            using (OpenFileDialog openFileDialog = new OpenFileDialog())
            {
                openFileDialog.InitialDirectory = "c:\\";
                openFileDialog.Filter = "Excel Files(.xlsx)|*.xlsx";
               // openFileDialog.FilterIndex = 2;
              //  openFileDialog.RestoreDirectory = true;

                if (openFileDialog.ShowDialog() == DialogResult.OK)
                {
                    //Get the path of specified file
                    filePath = openFileDialog.FileName;

                    //Read the contents of the file into a stream
             
                }
                return filePath;
            }

          //  MessageBox.Show(fileContent, "File Content at path: " + filePath, MessageBoxButtons.OK);
        }

        public void GetDataTableOfExcel(string file_path)
        {
            string connectionStr = ConfigurationManager.ConnectionStrings["RAMSDBEntitiesConnectionString"].ToString();
           
            DataSet dataSet = new DataSet();
            using (OleDbConnection conn = new OleDbConnection())
            {

                DataTable xlTable = new DataTable();
               

                string Import_FileName = file_path;
                //Import_FileName = System.IO.Path.GetDirectoryName(file_path);
                string fileExtension = Path.GetExtension(Import_FileName);
                if (fileExtension == ".xlsx")
                    conn.ConnectionString = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + Import_FileName + ";" + "Extended Properties='Excel 12.0 Xml;HDR=YES;'";

                conn.Open();

                xlTable = conn.GetOleDbSchemaTable(OleDbSchemaGuid.Tables, null);

                System.String strExcelSheetNames = "";
                string sheetName;
                //Loop through the excel database table names and take only 
                //the tables that ends with a $ characters. Other tables are not worksheets...
                for (int lngStart = 0; lngStart < xlTable.Rows.Count; lngStart++)
                {
                    //Remove the single-quote surrounding the table name...
                    sheetName = xlTable.Rows[lngStart][2].ToString().Replace("'", "");
                    if (sheetName.EndsWith("$")) //Yes, this is a worksheet
                    {
                        //concatenate with a single-quote delimeter... to be returned 
                        //as a string array later using the split function
                        strExcelSheetNames += sheetName.Substring(0, sheetName.Length - 1) + "~";
                    }
                }

                if (strExcelSheetNames.EndsWith("~"))
                //the last single quote needs to be removed 
                //so that the array index ends with the last sheetname
                {
                    strExcelSheetNames = strExcelSheetNames.Substring(0,
                                            strExcelSheetNames.Length - 1);
                }

                conn.Close();
               // conn.Dispose();

                char[] chrDelimter = { '~' };
                var xlSheets = strExcelSheetNames.Split(chrDelimter);


                conn.Open();
                foreach(string sheet in xlSheets)
                {
                    DataTable dt = new DataTable();
                    using (OleDbCommand comm = new OleDbCommand())
                    {
                        comm.CommandText = "Select * from [" + sheet + "$]";
                        comm.Connection = conn;
                        using (OleDbDataAdapter da = new OleDbDataAdapter())
                        {
                            da.SelectCommand = comm;
                            da.Fill(dt);
                        }
                       
                       
                    }
                    dt.TableName = sheet;
                    dataSet.Tables.Add(dt);

                }

                conn.Close();
                conn.Dispose();
                var x = dataSet.Tables.Count;// dt.Rows.Count;
                var z = 1;

             //   CustomersEntities entities = new CustomersEntities();
               

                
            }

            foreach (DataTable dataTable in dataSet.Tables)
            {
                switch (dataTable.TableName)
                {
                    case "TrafficSurvey":
                        foreach (DataRow row in dataTable.Rows)
                        {
                            TrafficSurvey mc = new TrafficSurvey();

                            mc = row.Cast<TrafficSurvey>();
                            dbContext.TrafficSurvey.Add(mc);
                         }
                        break;

                    case "MultiCriteriaData":
                        foreach (DataRow row in dataTable.Rows)
                        {
                            MultiCriteriaAnalysisData mc = new MultiCriteriaAnalysisData();

                            mc = row.Cast<MultiCriteriaAnalysisData>();
                            dbContext.MultiCriteriaAnalysisData.Add(mc);


                        }
                        break;

                    case "PavedRoadConditionSurvey":
                        foreach (DataRow row in dataTable.Rows)
                        {
                            PavedRoadConditionSurvey mc = new PavedRoadConditionSurvey();

                            mc = row.Cast<PavedRoadConditionSurvey>();
                            dbContext.PavedRoadConditionSurvey.Add(mc);


                        }
                        break;

                    case "UnpavedRoadConditionSurvey":
                        foreach (DataRow row in dataTable.Rows)
                        {
                            UnpavedRoadConditionSurvey  mc = new UnpavedRoadConditionSurvey();

                            mc = row.Cast<UnpavedRoadConditionSurvey>();
                            dbContext.UnpavedRoadConditionSurvey.Add(mc);


                        }
                        break;
                    default:
                        {
                            MessageBox.Show("The Excel file imported is the wrong format!", "Incorrect Format", MessageBoxButtons.OK);
                            return;
                        }
                        break;
                }
                    

            }


            
            dbContext.SaveChanges();

        }

        private void button3_Click(object sender, EventArgs e)
        {
            string filePath = OpenExcel();
            var x = 1;
        }
    }

}



